
# THIS FILE IS GENERATED BY SCRIPT
# DO NOT MODIFY

# pyright: reportOptionalMemberAccess=false

from enum import Enum, IntFlag
from dataclasses import dataclass
from typing import Callable, Tuple, List
from cffi import FFI

INVALID: int = 0xFFFFFFFF


class UwSeverityEnum(Enum):
    Note = 0
    Hint = 1
    Warning = 2
    Info = 3
    Error = 4
    Critical = 5

class UwConnectionStateEnum(Enum):
    Nothing = 0
    Connecting = 1
    Connected = 2
    Error = 3

class UwOrderTypeEnum(Enum):
    Nothing = 0
    Stop = 1
    Guard = 2
    Run = 3
    Fight = 4
    Load = 5
    Unload = 6
    SelfDestruct = 7

class UwOrderPriorityFlags(IntFlag):
    Nothing = 0
    Assistant = 1 << 0
    User = 1 << 1
    Enqueue = 1 << 2
    Repeat = 1 << 3

class UwPriorityEnum(Enum):
    Disabled = 0
    Normal = 1
    High = 2

class UwPingEnum(Enum):
    Nothing = 0
    Attention = 1
    Attack = 2
    Defend = 3
    Rally = 4
    Build = 5
    Evacuate = 6

class UwPathStateEnum(Enum):
    Nothing = 0
    Searching = 1
    Impossible = 2
    NotFound = 3
    Recompute = 4
    Found = 5
    Finished = 6

class UwForeignPolicyEnum(Enum):
    Nothing = 0
    Self = 1
    Ally = 2
    Neutral = 3
    Enemy = 4

class UwChatTargetEnum(Enum):
    Nothing = 0
    Direct = 1
    Everyone = 2
    Allies = 3
    Enemies = 4
    Observers = 5

class UwUnitStateFlags(IntFlag):
    Nothing = 0
    Shooting = 1 << 0
    Processing = 1 << 1
    Rebuilding = 1 << 2
    Stalling = 1 << 3
    Damaged = 1 << 4

class UwPlayerStateFlags(IntFlag):
    Nothing = 0
    Disconnected = 1 << 0
    Admin = 1 << 1
    Loaded = 1 << 2
    Pause = 1 << 3
    SkipCutscene = 1 << 4

class UwPlayerConnectionClassEnum(Enum):
    Nothing = 0
    Computer = 1
    VirtualReality = 2
    Robot = 3
    UwApi = 4

class UwForceStateFlags(IntFlag):
    Nothing = 0
    Disconnected = 1 << 0
    Winner = 1 << 1
    Defeated = 1 << 2

class UwGameStateEnum(Enum):
    Nothing = 0
    Session = 1
    Preparation = 2
    Starting = 3
    Game = 4
    Pause = 5
    CutscenePaused = 6
    CutsceneRunning = 7
    Finish = 8

class UwShootingEventEnum(Enum):
    Nothing = 0
    Shooting = 1
    Death = 2
    Explosion = 3

class UwTaskTypeEnum(Enum):
    Nothing = 0
    UnitPathfinding = 1
    ClustersDistances = 2

class UwMapStateEnum(Enum):
    Nothing = 0
    Downloading = 1
    Loading = 2
    Loaded = 3
    Unloading = 4
    Error = 5

class UwPrototypeTypeEnum(Enum):
    Nothing = 0
    Resource = 1
    Recipe = 2
    Construction = 3
    Unit = 4
    Upgrade = 5
    Race = 6

class UwOverviewFlags(IntFlag):
    Nothing = 0
    Resource = 1 << 0
    Construction = 1 << 1
    MobileUnit = 1 << 2
    StaticUnit = 1 << 3
    Unit = MobileUnit | StaticUnit


@dataclass
class UwLogCallback:
    message: str
    component: str
    severity: UwSeverityEnum

@dataclass
class UwMyPlayer:
    playerEntityId: int
    forceEntityId: int
    primaryController: bool
    admin: bool

@dataclass
class UwAssistConfig:
    logistics: bool
    aiming: bool
    fighting: bool

@dataclass
class UwPerformanceStatistics:
    gameSpeed: float
    mainThreadUtilization: float
    ping: float
    networkUp: int
    networkDown: int

@dataclass
class UwOrder:
    entity: int
    position: int
    order: UwOrderTypeEnum
    priority: UwOrderPriorityFlags

@dataclass
class UwOrders:
    orders: list[UwOrder]
    count: int

@dataclass
class UwIds:
    ids: list[int]
    count: int

@dataclass
class UwProtoComponent:
    proto: int

@dataclass
class UwOwnerComponent:
    force: int

@dataclass
class UwControllerComponent:
    player: int
    timestamp: int

@dataclass
class UwPositionComponent:
    position: int
    yaw: float

@dataclass
class UwUnitComponent:
    state: UwUnitStateFlags
    killCount: int

@dataclass
class UwLifeComponent:
    life: int

@dataclass
class UwManaComponent:
    mana: int

@dataclass
class UwMoveComponent:
    timestamp: int

@dataclass
class UwAimComponent:
    target: int

@dataclass
class UwRecipeComponent:
    recipe: int

@dataclass
class UwRecipeStatisticsComponent:
    timestamps: list[int]
    completed: int

@dataclass
class UwLogisticsTimestampComponent:
    timestamp: int

@dataclass
class UwPriorityComponent:
    priority: UwPriorityEnum

@dataclass
class UwAmountComponent:
    amount: int

@dataclass
class UwAttachmentComponent:
    target: int

@dataclass
class UwPingComponent:
    ping: UwPingEnum

@dataclass
class UwPlayerComponent:
    name: str
    nameLength: int
    steamUserId: int
    force: int
    progress: float
    ping: int
    state: UwPlayerStateFlags
    playerConnectionClass: UwPlayerConnectionClassEnum

@dataclass
class UwPlayerAiConfigComponent:
    difficulty: float
    aggressive: float
    stretching: float
    expansive: float

@dataclass
class UwForceComponent:
    color: list[float]
    score: int
    killCount: int
    lossCount: int
    finishTimestamp: int
    intendedTeam: int
    intendedRace: int
    state: UwForceStateFlags

@dataclass
class UwForceDetailsComponent:
    killValue: int
    lossValue: int
    startingPosition: int
    race: int

@dataclass
class UwForeignPolicyComponent:
    forces: list[int]
    policy: UwForeignPolicyEnum

@dataclass
class UwDiplomacyProposalComponent:
    offeror: int
    offeree: int
    proposal: UwForeignPolicyEnum

@dataclass
class UwShootingsArray:
    data: list[int]
    count: int

@dataclass
class UwMapInfo:
    name: str
    guid: str
    path: str
    maxPlayers: int

@dataclass
class UwMapStartingPosition:
    position: int
    minForces: int
    maxForces: int

@dataclass
class UwMapStartingPositionsArray:
    data: list[UwMapStartingPosition]
    count: int

@dataclass
class UwTile:
    position: list[float]
    up: list[float]
    neighborsIndices: list[int]
    neighborsCount: int
    clusterIndex: int
    terrain: int
    border: bool

@dataclass
class UwCluster:
    neighborsIndices: list[int]
    neighborsCount: int
    centerTileIndex: int

@dataclass
class UwClustersDistancesQuery:
    taskUserData: int
    startingCluster: int
    unitPrototype: int
    allowImpassableTerrain: bool

@dataclass
class UwClustersDistancesResult:
    distances: UwIds

@dataclass
class UwMyForceStatistics:
    logisticsUnitsIdle: int
    logisticsUnitsTotal: int
    militaryUnitsIdle: int
    militaryUnitsTotal: int
    closestDangerPosition: int
    closestDangerDistance: float

@dataclass
class UwUnitUpgrades:
    damage: float
    shootingRange: float
    splashRadius: float
    defense: float
    regenSpeed: float
    movementSpeed: float
    processingSpeed: float

@dataclass
class UwOverviewExtract:
    flags: list[UwOverviewFlags]
    count: int

@dataclass
class UwUnitPathfindingQuery:
    taskUserData: int
    startingPosition: int
    goalPosition: int
    unitPrototype: int
    maxIterations: int
    allowNearbyPosition: bool

@dataclass
class UwUnitPathfindingResult:
    path: UwIds
    state: UwPathStateEnum

Severity = UwSeverityEnum
LogCallback = UwLogCallback
ConnectionState = UwConnectionStateEnum
MyPlayer = UwMyPlayer
AssistConfig = UwAssistConfig
PerformanceStatistics = UwPerformanceStatistics
OrderType = UwOrderTypeEnum
OrderPriority = UwOrderPriorityFlags
Order = UwOrder
Orders = UwOrders
Ids = UwIds
Priority = UwPriorityEnum
Ping = UwPingEnum
PathState = UwPathStateEnum
ForeignPolicy = UwForeignPolicyEnum
ChatTarget = UwChatTargetEnum
ProtoComponent = UwProtoComponent
OwnerComponent = UwOwnerComponent
ControllerComponent = UwControllerComponent
PositionComponent = UwPositionComponent
UnitState = UwUnitStateFlags
UnitComponent = UwUnitComponent
LifeComponent = UwLifeComponent
ManaComponent = UwManaComponent
MoveComponent = UwMoveComponent
AimComponent = UwAimComponent
RecipeComponent = UwRecipeComponent
RecipeStatisticsComponent = UwRecipeStatisticsComponent
LogisticsTimestampComponent = UwLogisticsTimestampComponent
PriorityComponent = UwPriorityComponent
AmountComponent = UwAmountComponent
AttachmentComponent = UwAttachmentComponent
PingComponent = UwPingComponent
PlayerState = UwPlayerStateFlags
PlayerConnectionClass = UwPlayerConnectionClassEnum
PlayerComponent = UwPlayerComponent
PlayerAiConfigComponent = UwPlayerAiConfigComponent
ForceState = UwForceStateFlags
ForceComponent = UwForceComponent
ForceDetailsComponent = UwForceDetailsComponent
ForeignPolicyComponent = UwForeignPolicyComponent
DiplomacyProposalComponent = UwDiplomacyProposalComponent
GameState = UwGameStateEnum
ShootingEvent = UwShootingEventEnum
ShootingsArray = UwShootingsArray
TaskType = UwTaskTypeEnum
MapState = UwMapStateEnum
MapInfo = UwMapInfo
MapStartingPosition = UwMapStartingPosition
MapStartingPositionsArray = UwMapStartingPositionsArray
Tile = UwTile
Cluster = UwCluster
ClustersDistancesQuery = UwClustersDistancesQuery
ClustersDistancesResult = UwClustersDistancesResult
PrototypeType = UwPrototypeTypeEnum
MyForceStatistics = UwMyForceStatistics
UnitUpgrades = UwUnitUpgrades
Overview = UwOverviewFlags
OverviewExtract = UwOverviewExtract
UnitPathfindingQuery = UwUnitPathfindingQuery
UnitPathfindingResult = UwUnitPathfindingResult

UwExceptionCallbackType = Callable[[str], None]
UwLogCallbackType = Callable[[UwLogCallback], None]
UwConnectionStateCallbackType = Callable[[UwConnectionStateEnum], None]
UwGameStateCallbackType = Callable[[UwGameStateEnum], None]
UwUpdateCallbackType = Callable[[bool], None]
UwShootingsCallbackType = Callable[[UwShootingsArray], None]
UwForceEliminatedCallbackType = Callable[[int], None]
UwChatCallbackType = Callable[[int, str, UwChatTargetEnum], None]
UwTaskCompletedCallbackType = Callable[[int, UwTaskTypeEnum], None]
UwMapStateCallbackType = Callable[[UwMapStateEnum], None]

class Interop:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        self._ffi = None
        self._api = None

    def initialize(self, ffi, api):
        self._ffi = ffi
        self._api = api

    def _str_pytoc(self, s: str) -> bytes:
        return bytes(s, encoding="utf-8")

    def _str_ctopy(self, s) -> str:
        return self._ffi.string(s).decode("utf-8")


    def uwGetLobbyId(self) -> int:
        ret = self._api.uwGetLobbyId()
        ret = int(ret)
        return ret

    def uwGetUserId(self) -> int:
        ret = self._api.uwGetUserId()
        ret = int(ret)
        return ret

    def uwGetServerPort(self) -> int:
        ret = self._api.uwGetServerPort()
        ret = int(ret)
        return ret

    def uwAdminSetMapSelection(self, path: str) -> None:
        path_ = self._str_pytoc(path)
        self._api.uwAdminSetMapSelection(path_)

    def uwAdminSetGameSpeed(self, speed: float) -> None:
        self._api.uwAdminSetGameSpeed(speed)

    def uwAdminSetWeatherSpeed(self, speed: float, offset: float) -> None:
        self._api.uwAdminSetWeatherSpeed(speed, offset)

    def uwAdminStartGame(self) -> None:
        self._api.uwAdminStartGame()

    def uwAdminTerminateGame(self) -> None:
        self._api.uwAdminTerminateGame()

    def uwAdminPauseGame(self, pause: bool) -> None:
        self._api.uwAdminPauseGame(pause)

    def uwAdminSkipCutscene(self) -> None:
        self._api.uwAdminSkipCutscene()

    def uwAdminAddAi(self, intendedRace: int, difficulty: float) -> None:
        self._api.uwAdminAddAi(intendedRace, difficulty)

    def uwAdminKickPlayer(self, playerId: int) -> None:
        self._api.uwAdminKickPlayer(playerId)

    def uwAdminPlayerSetAdmin(self, playerId: int, admin: bool) -> None:
        self._api.uwAdminPlayerSetAdmin(playerId, admin)

    def uwAdminPlayerSetName(self, playerId: int, name: str) -> None:
        name_ = self._str_pytoc(name)
        self._api.uwAdminPlayerSetName(playerId, name_)

    def uwAdminPlayerAiConfig(self, playerId: int, config: UwPlayerAiConfigComponent) -> None:
        config_ = self._UwPlayerAiConfigComponent_pytoc(config)
        self._api.uwAdminPlayerAiConfig(playerId, config_)

    def uwAdminPlayerJoinForce(self, playerId: int, forceId: int) -> None:
        self._api.uwAdminPlayerJoinForce(playerId, forceId)

    def uwAdminForceJoinTeam(self, forceId: int, team: int) -> None:
        self._api.uwAdminForceJoinTeam(forceId, team)

    def uwAdminForceSetColor(self, forceId: int, r: float, g: float, b: float) -> None:
        self._api.uwAdminForceSetColor(forceId, r, g, b)

    def uwAdminForceSetRace(self, forceId: int, raceProto: int) -> None:
        self._api.uwAdminForceSetRace(forceId, raceProto)

    def uwAdminSendSuggestedCameraFocus(self, position: int) -> None:
        self._api.uwAdminSendSuggestedCameraFocus(position)

    def uwAdminSetAutomaticSuggestedCameraFocus(self, enabled: bool) -> None:
        self._api.uwAdminSetAutomaticSuggestedCameraFocus(enabled)

    def uwAdminSendChatMessageToPlayer(self, msg: str, playerId: int) -> None:
        msg_ = self._str_pytoc(msg)
        self._api.uwAdminSendChatMessageToPlayer(msg_, playerId)

    def uwAdminSendChatMessageToEveryone(self, msg: str) -> None:
        msg_ = self._str_pytoc(msg)
        self._api.uwAdminSendChatMessageToEveryone(msg_)

    def uwAdminSendChatCommand(self, msg: str) -> None:
        msg_ = self._str_pytoc(msg)
        self._api.uwAdminSendChatCommand(msg_)

    def uwAdminSendPing(self, position: int, ping: UwPingEnum, targetForce: int) -> None:
        ping_ = int(ping.value)
        self._api.uwAdminSendPing(position, ping_, targetForce)

    def uwInitialize(self, version: int) -> None:
        self._api.uwInitialize(version)

    def uwDeinitialize(self) -> None:
        self._api.uwDeinitialize()

    def uwSetExceptionCallback(self, callback: UwExceptionCallbackType) -> None:
        @self._ffi.callback("UwExceptionCallbackType")
        def c_callback(message):
            message = self._str_ctopy(message)
            callback(message)
        self._uwSetExceptionCallback_callback = c_callback
        self._api.uwSetExceptionCallback(c_callback)

    def uwSetLogCallback(self, callback: UwLogCallbackType) -> None:
        @self._ffi.callback("UwLogCallbackType")
        def c_callback(data):
            data = self._UwLogCallback_ctopy(data)
            callback(data)
        self._uwSetLogCallback_callback = c_callback
        self._api.uwSetLogCallback(c_callback)

    def uwInitializeConsoleLogger(self) -> None:
        self._api.uwInitializeConsoleLogger()

    def uwLog(self, severity: UwSeverityEnum, message: str) -> None:
        severity_ = int(severity.value)
        message_ = self._str_pytoc(message)
        self._api.uwLog(severity_, message_)

    def uwSetConnectionStateCallback(self, callback: UwConnectionStateCallbackType) -> None:
        @self._ffi.callback("UwConnectionStateCallbackType")
        def c_callback(state):
            state = UwConnectionStateEnum(state)
            callback(state)
        self._uwSetConnectionStateCallback_callback = c_callback
        self._api.uwSetConnectionStateCallback(c_callback)

    def uwConnectionState(self) -> UwConnectionStateEnum:
        ret = self._api.uwConnectionState()
        ret = UwConnectionStateEnum(ret)
        return ret

    def uwSetConnectStartGui(self, enabled: bool, extraCmdParams: str) -> None:
        extraCmdParams_ = self._str_pytoc(extraCmdParams)
        self._api.uwSetConnectStartGui(enabled, extraCmdParams_)

    def uwConnectFindLan(self, timeoutMicroseconds: int) -> bool:
        ret = self._api.uwConnectFindLan(timeoutMicroseconds)
        ret = bool(ret)
        return ret

    def uwConnectDirect(self, address: str, port: int) -> None:
        address_ = self._str_pytoc(address)
        self._api.uwConnectDirect(address_, port)

    def uwConnectLobbyId(self, lobbyId: int) -> None:
        self._api.uwConnectLobbyId(lobbyId)

    def uwConnectEnvironment(self) -> bool:
        ret = self._api.uwConnectEnvironment()
        ret = bool(ret)
        return ret

    def uwConnectNewServer(self, visibility: int, name: str, extraCmdParams: str) -> None:
        name_ = self._str_pytoc(name)
        extraCmdParams_ = self._str_pytoc(extraCmdParams)
        self._api.uwConnectNewServer(visibility, name_, extraCmdParams_)

    def uwTryReconnect(self) -> bool:
        ret = self._api.uwTryReconnect()
        ret = bool(ret)
        return ret

    def uwDisconnect(self) -> None:
        self._api.uwDisconnect()

    def uwSetPlayerName(self, name: str) -> None:
        name_ = self._str_pytoc(name)
        self._api.uwSetPlayerName(name_)

    def uwPlayerJoinForce(self, force: int) -> None:
        self._api.uwPlayerJoinForce(force)

    def uwSetForceColor(self, r: float, g: float, b: float) -> None:
        self._api.uwSetForceColor(r, g, b)

    def uwSetForceRace(self, raceProto: int) -> None:
        self._api.uwSetForceRace(raceProto)

    def uwForceJoinTeam(self, team: int) -> None:
        self._api.uwForceJoinTeam(team)

    def uwSkipCutscene(self) -> None:
        self._api.uwSkipCutscene()

    def uwMyPlayer(self) -> Tuple[bool, UwMyPlayer]:
        data = self._ffi.new("UwMyPlayer *")
        ret = self._api.uwMyPlayer(data)
        data_ = self._UwMyPlayer_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwSetAssistConfig(self, config: UwAssistConfig) -> None:
        config_ = self._UwAssistConfig_pytoc(config)
        self._api.uwSetAssistConfig(config_)

    def uwPerformanceStatistics(self) -> UwPerformanceStatistics:
        data = self._ffi.new("UwPerformanceStatistics *")
        self._api.uwPerformanceStatistics(data)
        data_ = self._UwPerformanceStatistics_ctopy(data)
        return data_

    def uwPerformanceProfiling(self, enable: bool) -> None:
        self._api.uwPerformanceProfiling(enable)

    def uwProfilingEventBegin(self) -> int:
        ret = self._api.uwProfilingEventBegin()
        ret = int(ret)
        return ret

    def uwProfilingEventEnd(self, name: str, eventStartTime: int) -> None:
        name_ = self._str_pytoc(name)
        self._api.uwProfilingEventEnd(name_, eventStartTime)

    def uwOrder(self, unit: int, data: UwOrder) -> None:
        data_ = self._UwOrder_pytoc(data)
        self._api.uwOrder(unit, data_)

    def uwOrders(self, unit: int) -> UwOrders:
        data = self._ffi.new("UwOrders *")
        self._api.uwOrders(unit, data)
        data_ = self._UwOrders_ctopy(data)
        return data_

    def uwCommandPlaceConstruction(self, constructionProto: int, position: int, yaw: float, recipeProto: int, priority: UwPriorityEnum) -> None:
        priority_ = int(priority.value)
        self._api.uwCommandPlaceConstruction(constructionProto, position, yaw, recipeProto, priority_)

    def uwCommandSetRecipe(self, unitOrConstructionId: int, recipeProto: int) -> None:
        self._api.uwCommandSetRecipe(unitOrConstructionId, recipeProto)

    def uwCommandSetPriority(self, unitOrConstructionId: int, priority: UwPriorityEnum) -> None:
        priority_ = int(priority.value)
        self._api.uwCommandSetPriority(unitOrConstructionId, priority_)

    def uwCommandLoad(self, unitId: int, resourceProto: int) -> None:
        self._api.uwCommandLoad(unitId, resourceProto)

    def uwCommandUnload(self, unitId: int) -> None:
        self._api.uwCommandUnload(unitId)

    def uwCommandMove(self, unitId: int, position: int, yaw: float) -> None:
        self._api.uwCommandMove(unitId, position, yaw)

    def uwCommandAim(self, unitId: int, targetId: int) -> None:
        self._api.uwCommandAim(unitId, targetId)

    def uwCommandRenounceControl(self, entityId: int) -> None:
        self._api.uwCommandRenounceControl(entityId)

    def uwCommandSelfDestruct(self, entityId: int) -> None:
        self._api.uwCommandSelfDestruct(entityId)

    def uwEntityPointer(self, id: int):
        ret = self._api.uwEntityPointer(id)
        return ret

    def uwEntityId(self, entity) -> int:
        ret = self._api.uwEntityId(entity)
        ret = int(ret)
        return ret

    def uwModifiedEntities(self) -> UwIds:
        data = self._ffi.new("UwIds *")
        self._api.uwModifiedEntities(data)
        data_ = self._UwIds_ctopy(data)
        return data_

    def uwAllEntities(self) -> UwIds:
        data = self._ffi.new("UwIds *")
        self._api.uwAllEntities(data)
        data_ = self._UwIds_ctopy(data)
        return data_

    def uwEntityExists(self, id: int) -> bool:
        ret = self._api.uwEntityExists(id)
        ret = bool(ret)
        return ret

    def uwFetchProtoComponent(self, entity) -> Tuple[bool, UwProtoComponent]:
        data = self._ffi.new("UwProtoComponent *")
        ret = self._api.uwFetchProtoComponent(entity, data)
        data_ = self._UwProtoComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchOwnerComponent(self, entity) -> Tuple[bool, UwOwnerComponent]:
        data = self._ffi.new("UwOwnerComponent *")
        ret = self._api.uwFetchOwnerComponent(entity, data)
        data_ = self._UwOwnerComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchControllerComponent(self, entity) -> Tuple[bool, UwControllerComponent]:
        data = self._ffi.new("UwControllerComponent *")
        ret = self._api.uwFetchControllerComponent(entity, data)
        data_ = self._UwControllerComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchPositionComponent(self, entity) -> Tuple[bool, UwPositionComponent]:
        data = self._ffi.new("UwPositionComponent *")
        ret = self._api.uwFetchPositionComponent(entity, data)
        data_ = self._UwPositionComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchUnitComponent(self, entity) -> Tuple[bool, UwUnitComponent]:
        data = self._ffi.new("UwUnitComponent *")
        ret = self._api.uwFetchUnitComponent(entity, data)
        data_ = self._UwUnitComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchLifeComponent(self, entity) -> Tuple[bool, UwLifeComponent]:
        data = self._ffi.new("UwLifeComponent *")
        ret = self._api.uwFetchLifeComponent(entity, data)
        data_ = self._UwLifeComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchManaComponent(self, entity) -> Tuple[bool, UwManaComponent]:
        data = self._ffi.new("UwManaComponent *")
        ret = self._api.uwFetchManaComponent(entity, data)
        data_ = self._UwManaComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchMoveComponent(self, entity) -> Tuple[bool, UwMoveComponent]:
        data = self._ffi.new("UwMoveComponent *")
        ret = self._api.uwFetchMoveComponent(entity, data)
        data_ = self._UwMoveComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchAimComponent(self, entity) -> Tuple[bool, UwAimComponent]:
        data = self._ffi.new("UwAimComponent *")
        ret = self._api.uwFetchAimComponent(entity, data)
        data_ = self._UwAimComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchRecipeComponent(self, entity) -> Tuple[bool, UwRecipeComponent]:
        data = self._ffi.new("UwRecipeComponent *")
        ret = self._api.uwFetchRecipeComponent(entity, data)
        data_ = self._UwRecipeComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchRecipeStatisticsComponent(self, entity) -> Tuple[bool, UwRecipeStatisticsComponent]:
        data = self._ffi.new("UwRecipeStatisticsComponent *")
        ret = self._api.uwFetchRecipeStatisticsComponent(entity, data)
        data_ = self._UwRecipeStatisticsComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchLogisticsTimestampComponent(self, entity) -> Tuple[bool, UwLogisticsTimestampComponent]:
        data = self._ffi.new("UwLogisticsTimestampComponent *")
        ret = self._api.uwFetchLogisticsTimestampComponent(entity, data)
        data_ = self._UwLogisticsTimestampComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchPriorityComponent(self, entity) -> Tuple[bool, UwPriorityComponent]:
        data = self._ffi.new("UwPriorityComponent *")
        ret = self._api.uwFetchPriorityComponent(entity, data)
        data_ = self._UwPriorityComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchAmountComponent(self, entity) -> Tuple[bool, UwAmountComponent]:
        data = self._ffi.new("UwAmountComponent *")
        ret = self._api.uwFetchAmountComponent(entity, data)
        data_ = self._UwAmountComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchAttachmentComponent(self, entity) -> Tuple[bool, UwAttachmentComponent]:
        data = self._ffi.new("UwAttachmentComponent *")
        ret = self._api.uwFetchAttachmentComponent(entity, data)
        data_ = self._UwAttachmentComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchPingComponent(self, entity) -> Tuple[bool, UwPingComponent]:
        data = self._ffi.new("UwPingComponent *")
        ret = self._api.uwFetchPingComponent(entity, data)
        data_ = self._UwPingComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchPlayerComponent(self, entity) -> Tuple[bool, UwPlayerComponent]:
        data = self._ffi.new("UwPlayerComponent *")
        ret = self._api.uwFetchPlayerComponent(entity, data)
        data_ = self._UwPlayerComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchPlayerAiConfigComponent(self, entity) -> Tuple[bool, UwPlayerAiConfigComponent]:
        data = self._ffi.new("UwPlayerAiConfigComponent *")
        ret = self._api.uwFetchPlayerAiConfigComponent(entity, data)
        data_ = self._UwPlayerAiConfigComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchForceComponent(self, entity) -> Tuple[bool, UwForceComponent]:
        data = self._ffi.new("UwForceComponent *")
        ret = self._api.uwFetchForceComponent(entity, data)
        data_ = self._UwForceComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchForceDetailsComponent(self, entity) -> Tuple[bool, UwForceDetailsComponent]:
        data = self._ffi.new("UwForceDetailsComponent *")
        ret = self._api.uwFetchForceDetailsComponent(entity, data)
        data_ = self._UwForceDetailsComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchForeignPolicyComponent(self, entity) -> Tuple[bool, UwForeignPolicyComponent]:
        data = self._ffi.new("UwForeignPolicyComponent *")
        ret = self._api.uwFetchForeignPolicyComponent(entity, data)
        data_ = self._UwForeignPolicyComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwFetchDiplomacyProposalComponent(self, entity) -> Tuple[bool, UwDiplomacyProposalComponent]:
        data = self._ffi.new("UwDiplomacyProposalComponent *")
        ret = self._api.uwFetchDiplomacyProposalComponent(entity, data)
        data_ = self._UwDiplomacyProposalComponent_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwSetGameStateCallback(self, callback: UwGameStateCallbackType) -> None:
        @self._ffi.callback("UwGameStateCallbackType")
        def c_callback(state):
            state = UwGameStateEnum(state)
            callback(state)
        self._uwSetGameStateCallback_callback = c_callback
        self._api.uwSetGameStateCallback(c_callback)

    def uwGameState(self) -> UwGameStateEnum:
        ret = self._api.uwGameState()
        ret = UwGameStateEnum(ret)
        return ret

    def uwGameTick(self) -> int:
        ret = self._api.uwGameTick()
        ret = int(ret)
        return ret

    def uwSetUpdateCallback(self, callback: UwUpdateCallbackType) -> None:
        @self._ffi.callback("UwUpdateCallbackType")
        def c_callback(stepping):
            stepping = bool(stepping)
            callback(stepping)
        self._uwSetUpdateCallback_callback = c_callback
        self._api.uwSetUpdateCallback(c_callback)

    def uwSetShootingsCallback(self, callback: UwShootingsCallbackType) -> None:
        @self._ffi.callback("UwShootingsCallbackType")
        def c_callback(data):
            data = self._UwShootingsArray_ctopy(data)
            callback(data)
        self._uwSetShootingsCallback_callback = c_callback
        self._api.uwSetShootingsCallback(c_callback)

    def uwSetForceEliminatedCallback(self, callback: UwForceEliminatedCallbackType) -> None:
        @self._ffi.callback("UwForceEliminatedCallbackType")
        def c_callback(id):
            id = int(id)
            callback(id)
        self._uwSetForceEliminatedCallback_callback = c_callback
        self._api.uwSetForceEliminatedCallback(c_callback)

    def uwSetChatCallback(self, callback: UwChatCallbackType) -> None:
        @self._ffi.callback("UwChatCallbackType")
        def c_callback(sender, message, target):
            sender = int(sender)
            message = self._str_ctopy(message)
            target = UwChatTargetEnum(target)
            callback(sender, message, target)
        self._uwSetChatCallback_callback = c_callback
        self._api.uwSetChatCallback(c_callback)

    def uwSetTaskCompletedCallback(self, callback: UwTaskCompletedCallbackType) -> None:
        @self._ffi.callback("UwTaskCompletedCallbackType")
        def c_callback(taskUserData, type):
            taskUserData = int(taskUserData)
            type = UwTaskTypeEnum(type)
            callback(taskUserData, type)
        self._uwSetTaskCompletedCallback_callback = c_callback
        self._api.uwSetTaskCompletedCallback(c_callback)

    def uwSetMapStateCallback(self, callback: UwMapStateCallbackType) -> None:
        @self._ffi.callback("UwMapStateCallbackType")
        def c_callback(state):
            state = UwMapStateEnum(state)
            callback(state)
        self._uwSetMapStateCallback_callback = c_callback
        self._api.uwSetMapStateCallback(c_callback)

    def uwMapState(self) -> UwMapStateEnum:
        ret = self._api.uwMapState()
        ret = UwMapStateEnum(ret)
        return ret

    def uwMapInfo(self) -> Tuple[bool, UwMapInfo]:
        data = self._ffi.new("UwMapInfo *")
        ret = self._api.uwMapInfo(data)
        data_ = self._UwMapInfo_ctopy(data)
        ret = bool(ret)
        return ret, data_

    def uwMapStartingPositions(self) -> UwMapStartingPositionsArray:
        data = self._ffi.new("UwMapStartingPositionsArray *")
        self._api.uwMapStartingPositions(data)
        data_ = self._UwMapStartingPositionsArray_ctopy(data)
        return data_

    def uwTilesCount(self) -> int:
        ret = self._api.uwTilesCount()
        ret = int(ret)
        return ret

    def uwTile(self, index: int) -> UwTile:
        data = self._ffi.new("UwTile *")
        self._api.uwTile(index, data)
        data_ = self._UwTile_ctopy(data)
        return data_

    def uwClustersCount(self) -> int:
        ret = self._api.uwClustersCount()
        ret = int(ret)
        return ret

    def uwCluster(self, index: int) -> UwCluster:
        data = self._ffi.new("UwCluster *")
        self._api.uwCluster(index, data)
        data_ = self._UwCluster_ctopy(data)
        return data_

    def uwAreaRange(self, x: float, y: float, z: float, radius: float) -> UwIds:
        data = self._ffi.new("UwIds *")
        self._api.uwAreaRange(x, y, z, radius, data)
        data_ = self._UwIds_ctopy(data)
        return data_

    def uwAreaConnected(self, position: int, radius: float) -> UwIds:
        data = self._ffi.new("UwIds *")
        self._api.uwAreaConnected(position, radius, data)
        data_ = self._UwIds_ctopy(data)
        return data_

    def uwAreaNeighborhood(self, position: int, radius: float) -> UwIds:
        data = self._ffi.new("UwIds *")
        self._api.uwAreaNeighborhood(position, radius, data)
        data_ = self._UwIds_ctopy(data)
        return data_

    def uwAreaExtended(self, position: int, radius: float) -> UwIds:
        data = self._ffi.new("UwIds *")
        self._api.uwAreaExtended(position, radius, data)
        data_ = self._UwIds_ctopy(data)
        return data_

    def uwTestVisible(self, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float) -> bool:
        ret = self._api.uwTestVisible(x1, y1, z1, x2, y2, z2)
        ret = bool(ret)
        return ret

    def uwTestShooting(self, shooterPosition: int, shooterProto: int, shootingRangeUpgrade: float, targetPosition: int, targetProto: int) -> bool:
        ret = self._api.uwTestShooting(shooterPosition, shooterProto, shootingRangeUpgrade, targetPosition, targetProto)
        ret = bool(ret)
        return ret

    def uwDistanceLine(self, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float) -> float:
        ret = self._api.uwDistanceLine(x1, y1, z1, x2, y2, z2)
        ret = float(ret)
        return ret

    def uwDistanceEstimate(self, positionA: int, positionB: int) -> float:
        ret = self._api.uwDistanceEstimate(positionA, positionB)
        ret = float(ret)
        return ret

    def uwYaw(self, startPosition: int, goalPosition: int) -> float:
        ret = self._api.uwYaw(startPosition, goalPosition)
        ret = float(ret)
        return ret

    def uwStartClustersDistances(self, query: UwClustersDistancesQuery) -> None:
        query_ = self._UwClustersDistancesQuery_pytoc(query)
        self._api.uwStartClustersDistances(query_)

    def uwRetrieveClustersDistances(self) -> UwClustersDistancesResult:
        data = self._ffi.new("UwClustersDistancesResult *")
        self._api.uwRetrieveClustersDistances(data)
        data_ = self._UwClustersDistancesResult_ctopy(data)
        return data_

    def uwAllPrototypes(self) -> UwIds:
        data = self._ffi.new("UwIds *")
        self._api.uwAllPrototypes(data)
        data_ = self._UwIds_ctopy(data)
        return data_

    def uwPrototypeType(self, prototypeId: int) -> UwPrototypeTypeEnum:
        ret = self._api.uwPrototypeType(prototypeId)
        ret = UwPrototypeTypeEnum(ret)
        return ret

    def uwPrototypeJson(self, prototypeId: int) -> str:
        ret = self._api.uwPrototypeJson(prototypeId)
        ret = self._str_ctopy(ret)
        return ret

    def uwDefinitionsJson(self) -> str:
        ret = self._api.uwDefinitionsJson()
        ret = self._str_ctopy(ret)
        return ret

    def uwHashString(self, str: str) -> int:
        str_ = self._str_pytoc(str)
        ret = self._api.uwHashString(str_)
        ret = int(ret)
        return ret

    def uwMyForceStatistics(self) -> UwMyForceStatistics:
        data = self._ffi.new("UwMyForceStatistics *")
        self._api.uwMyForceStatistics(data)
        data_ = self._UwMyForceStatistics_ctopy(data)
        return data_

    def uwUnitPathState(self, unitId: int) -> UwPathStateEnum:
        ret = self._api.uwUnitPathState(unitId)
        ret = UwPathStateEnum(ret)
        return ret

    def uwUnitUpgrades(self, unit: int) -> UwUnitUpgrades:
        data = self._ffi.new("UwUnitUpgrades *")
        self._api.uwUnitUpgrades(unit, data)
        data_ = self._UwUnitUpgrades_ctopy(data)
        return data_

    def uwTestShootingEntities(self, shooterId: int, targetId: int) -> bool:
        ret = self._api.uwTestShootingEntities(shooterId, targetId)
        ret = bool(ret)
        return ret

    def uwTestConstructionPlacement(self, constructionProto: int, position: int, recipeProto: int) -> bool:
        ret = self._api.uwTestConstructionPlacement(constructionProto, position, recipeProto)
        ret = bool(ret)
        return ret

    def uwFindConstructionPlacement(self, constructionProto: int, position: int, recipeProto: int) -> int:
        ret = self._api.uwFindConstructionPlacement(constructionProto, position, recipeProto)
        ret = int(ret)
        return ret

    def uwOverviewFlags(self, position: int) -> UwOverviewFlags:
        ret = self._api.uwOverviewFlags(position)
        ret = UwOverviewFlags(ret)
        return ret

    def uwOverviewIds(self, position: int) -> UwIds:
        data = self._ffi.new("UwIds *")
        self._api.uwOverviewIds(position, data)
        data_ = self._UwIds_ctopy(data)
        return data_

    def uwOverviewExtract(self) -> UwOverviewExtract:
        data = self._ffi.new("UwOverviewExtract *")
        self._api.uwOverviewExtract(data)
        data_ = self._UwOverviewExtract_ctopy(data)
        return data_

    def uwStartUnitPathfinding(self, query: UwUnitPathfindingQuery) -> None:
        query_ = self._UwUnitPathfindingQuery_pytoc(query)
        self._api.uwStartUnitPathfinding(query_)

    def uwRetrieveUnitPathfinding(self) -> UwUnitPathfindingResult:
        data = self._ffi.new("UwUnitPathfindingResult *")
        self._api.uwRetrieveUnitPathfinding(data)
        data_ = self._UwUnitPathfindingResult_ctopy(data)
        return data_

    def _UwLogCallback_ctopy(self, val) -> UwLogCallback:
        return UwLogCallback(self._str_ctopy(val.message), self._str_ctopy(val.component), UwSeverityEnum(val.severity))

    def _UwMyPlayer_ctopy(self, val) -> UwMyPlayer:
        return UwMyPlayer(int(val.playerEntityId), int(val.forceEntityId), bool(val.primaryController), bool(val.admin))

    def _UwAssistConfig_ctopy(self, val) -> UwAssistConfig:
        return UwAssistConfig(bool(val.logistics), bool(val.aiming), bool(val.fighting))

    def _UwAssistConfig_pytoc(self, val: UwAssistConfig):
        r = self._ffi.new("UwAssistConfig *")
        r.logistics = val.logistics
        r.aiming = val.aiming
        r.fighting = val.fighting
        return r

    def _UwPerformanceStatistics_ctopy(self, val) -> UwPerformanceStatistics:
        return UwPerformanceStatistics(float(val.gameSpeed), float(val.mainThreadUtilization), float(val.ping), int(val.networkUp), int(val.networkDown))

    def _UwOrder_ctopy(self, val) -> UwOrder:
        return UwOrder(int(val.entity), int(val.position), UwOrderTypeEnum(val.order), UwOrderPriorityFlags(val.priority))

    def _UwOrder_pytoc(self, val: UwOrder):
        r = self._ffi.new("UwOrder *")
        r.entity = val.entity
        r.position = val.position
        r.order = val.order.value
        r.priority = val.priority.value
        return r

    def _UwOrders_ctopy(self, val) -> UwOrders:
        return UwOrders(list[UwOrder]([self._UwOrder_ctopy(val.orders[i]) for i in range(val.count)]), int(val.count))

    def _UwIds_ctopy(self, val) -> UwIds:
        return UwIds(list[int]([int(val.ids[i]) for i in range(val.count)]), int(val.count))

    def _UwProtoComponent_ctopy(self, val) -> UwProtoComponent:
        return UwProtoComponent(int(val.proto))

    def _UwOwnerComponent_ctopy(self, val) -> UwOwnerComponent:
        return UwOwnerComponent(int(val.force))

    def _UwControllerComponent_ctopy(self, val) -> UwControllerComponent:
        return UwControllerComponent(int(val.player), int(val.timestamp))

    def _UwPositionComponent_ctopy(self, val) -> UwPositionComponent:
        return UwPositionComponent(int(val.position), float(val.yaw))

    def _UwUnitComponent_ctopy(self, val) -> UwUnitComponent:
        return UwUnitComponent(UwUnitStateFlags(val.state), int(val.killCount))

    def _UwLifeComponent_ctopy(self, val) -> UwLifeComponent:
        return UwLifeComponent(int(val.life))

    def _UwManaComponent_ctopy(self, val) -> UwManaComponent:
        return UwManaComponent(int(val.mana))

    def _UwMoveComponent_ctopy(self, val) -> UwMoveComponent:
        return UwMoveComponent(int(val.timestamp))

    def _UwAimComponent_ctopy(self, val) -> UwAimComponent:
        return UwAimComponent(int(val.target))

    def _UwRecipeComponent_ctopy(self, val) -> UwRecipeComponent:
        return UwRecipeComponent(int(val.recipe))

    def _UwRecipeStatisticsComponent_ctopy(self, val) -> UwRecipeStatisticsComponent:
        return UwRecipeStatisticsComponent(list[int]([int(val.timestamps[i]) for i in range(3)]), int(val.completed))

    def _UwLogisticsTimestampComponent_ctopy(self, val) -> UwLogisticsTimestampComponent:
        return UwLogisticsTimestampComponent(int(val.timestamp))

    def _UwPriorityComponent_ctopy(self, val) -> UwPriorityComponent:
        return UwPriorityComponent(UwPriorityEnum(val.priority))

    def _UwAmountComponent_ctopy(self, val) -> UwAmountComponent:
        return UwAmountComponent(int(val.amount))

    def _UwAttachmentComponent_ctopy(self, val) -> UwAttachmentComponent:
        return UwAttachmentComponent(int(val.target))

    def _UwPingComponent_ctopy(self, val) -> UwPingComponent:
        return UwPingComponent(UwPingEnum(val.ping))

    def _UwPlayerComponent_ctopy(self, val) -> UwPlayerComponent:
        return UwPlayerComponent(self._str_ctopy(val.name), int(val.nameLength), int(val.steamUserId), int(val.force), float(val.progress), int(val.ping), UwPlayerStateFlags(val.state), UwPlayerConnectionClassEnum(val.playerConnectionClass))

    def _UwPlayerAiConfigComponent_ctopy(self, val) -> UwPlayerAiConfigComponent:
        return UwPlayerAiConfigComponent(float(val.difficulty), float(val.aggressive), float(val.stretching), float(val.expansive))

    def _UwPlayerAiConfigComponent_pytoc(self, val: UwPlayerAiConfigComponent):
        r = self._ffi.new("UwPlayerAiConfigComponent *")
        r.difficulty = val.difficulty
        r.aggressive = val.aggressive
        r.stretching = val.stretching
        r.expansive = val.expansive
        return r

    def _UwForceComponent_ctopy(self, val) -> UwForceComponent:
        return UwForceComponent(list[float]([float(val.color[i]) for i in range(3)]), int(val.score), int(val.killCount), int(val.lossCount), int(val.finishTimestamp), int(val.intendedTeam), int(val.intendedRace), UwForceStateFlags(val.state))

    def _UwForceDetailsComponent_ctopy(self, val) -> UwForceDetailsComponent:
        return UwForceDetailsComponent(int(val.killValue), int(val.lossValue), int(val.startingPosition), int(val.race))

    def _UwForeignPolicyComponent_ctopy(self, val) -> UwForeignPolicyComponent:
        return UwForeignPolicyComponent(list[int]([int(val.forces[i]) for i in range(2)]), UwForeignPolicyEnum(val.policy))

    def _UwDiplomacyProposalComponent_ctopy(self, val) -> UwDiplomacyProposalComponent:
        return UwDiplomacyProposalComponent(int(val.offeror), int(val.offeree), UwForeignPolicyEnum(val.proposal))

    def _UwShootingsArray_ctopy(self, val) -> UwShootingsArray:
        return UwShootingsArray(list[int]([int(val.data[i]) for i in range(val.count)]), int(val.count))

    def _UwMapInfo_ctopy(self, val) -> UwMapInfo:
        return UwMapInfo(self._str_ctopy(val.name), self._str_ctopy(val.guid), self._str_ctopy(val.path), int(val.maxPlayers))

    def _UwMapStartingPosition_ctopy(self, val) -> UwMapStartingPosition:
        return UwMapStartingPosition(int(val.position), int(val.minForces), int(val.maxForces))

    def _UwMapStartingPositionsArray_ctopy(self, val) -> UwMapStartingPositionsArray:
        return UwMapStartingPositionsArray(list[UwMapStartingPosition]([self._UwMapStartingPosition_ctopy(val.data[i]) for i in range(val.count)]), int(val.count))

    def _UwTile_ctopy(self, val) -> UwTile:
        return UwTile(list[float]([float(val.position[i]) for i in range(3)]), list[float]([float(val.up[i]) for i in range(3)]), list[int]([int(val.neighborsIndices[i]) for i in range(val.neighborsCount)]), int(val.neighborsCount), int(val.clusterIndex), int(val.terrain), bool(val.border))

    def _UwCluster_ctopy(self, val) -> UwCluster:
        return UwCluster(list[int]([int(val.neighborsIndices[i]) for i in range(val.neighborsCount)]), int(val.neighborsCount), int(val.centerTileIndex))

    def _UwClustersDistancesQuery_ctopy(self, val) -> UwClustersDistancesQuery:
        return UwClustersDistancesQuery(int(val.taskUserData), int(val.startingCluster), int(val.unitPrototype), bool(val.allowImpassableTerrain))

    def _UwClustersDistancesQuery_pytoc(self, val: UwClustersDistancesQuery):
        r = self._ffi.new("UwClustersDistancesQuery *")
        r.taskUserData = val.taskUserData
        r.startingCluster = val.startingCluster
        r.unitPrototype = val.unitPrototype
        r.allowImpassableTerrain = val.allowImpassableTerrain
        return r

    def _UwClustersDistancesResult_ctopy(self, val) -> UwClustersDistancesResult:
        return UwClustersDistancesResult(self._UwIds_ctopy(val.distances))

    def _UwMyForceStatistics_ctopy(self, val) -> UwMyForceStatistics:
        return UwMyForceStatistics(int(val.logisticsUnitsIdle), int(val.logisticsUnitsTotal), int(val.militaryUnitsIdle), int(val.militaryUnitsTotal), int(val.closestDangerPosition), float(val.closestDangerDistance))

    def _UwUnitUpgrades_ctopy(self, val) -> UwUnitUpgrades:
        return UwUnitUpgrades(float(val.damage), float(val.shootingRange), float(val.splashRadius), float(val.defense), float(val.regenSpeed), float(val.movementSpeed), float(val.processingSpeed))

    def _UwOverviewExtract_ctopy(self, val) -> UwOverviewExtract:
        return UwOverviewExtract(list[UwOverviewFlags]([UwOverviewFlags(val.flags[i]) for i in range(val.count)]), int(val.count))

    def _UwUnitPathfindingQuery_ctopy(self, val) -> UwUnitPathfindingQuery:
        return UwUnitPathfindingQuery(int(val.taskUserData), int(val.startingPosition), int(val.goalPosition), int(val.unitPrototype), int(val.maxIterations), bool(val.allowNearbyPosition))

    def _UwUnitPathfindingQuery_pytoc(self, val: UwUnitPathfindingQuery):
        r = self._ffi.new("UwUnitPathfindingQuery *")
        r.taskUserData = val.taskUserData
        r.startingPosition = val.startingPosition
        r.goalPosition = val.goalPosition
        r.unitPrototype = val.unitPrototype
        r.maxIterations = val.maxIterations
        r.allowNearbyPosition = val.allowNearbyPosition
        return r

    def _UwUnitPathfindingResult_ctopy(self, val) -> UwUnitPathfindingResult:
        return UwUnitPathfindingResult(self._UwIds_ctopy(val.path), UwPathStateEnum(val.state))



uw_interop = Interop()
